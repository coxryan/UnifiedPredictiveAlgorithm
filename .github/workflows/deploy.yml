name: Deploy Portal

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"   # optional nightly refresh

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  UPA_YEAR: "2025"
  UPA_BACKTEST_YEAR: "2024"
  UPA_EDGE_MIN: "2"
  UPA_VALUE_MIN: "1"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- CFBD API cache (persists across runs) ----------
      - name: Set cache day
        run: echo "CACHE_DAY=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Restore API cache
        uses: actions/cache@v4
        with:
          path: data/.api_cache
          key: api-cache-${{ github.ref_name }}-${{ hashFiles('agents/*.py') }}-${{ env.CACHE_DAY }}
          restore-keys: |
            api-cache-${{ github.ref_name }}-
            api-cache-

      # ---------- Toolchains ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "agents/requirements.txt" ]; then
            pip install -r agents/requirements.txt
          else
            pip install cfbd pandas numpy
          fi

      # NOTE: no cache field here (it requires a lockfile)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ---------- Data collection (live + backtest) ----------
      - name: Run collector (live + backtest)
        env:
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
          UPA_YEAR: ${{ env.UPA_YEAR }}
          UPA_BACKTEST_YEAR: ${{ env.UPA_BACKTEST_YEAR }}
        run: |
          python agents/collect_cfbd_all.py --year "${UPA_YEAR}" --backtest "${UPA_BACKTEST_YEAR}"
          echo "Data files written:"
          find data -maxdepth 2 -type f -printf "%P\n" | sort || true

      # ---------- Build UI ----------
      - name: Install Node deps
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build

      # ---------- Ship data into built site ----------
      - name: Copy data -> dist/data
        run: |
          mkdir -p dist/data
          cp -R data/* dist/data/ 2>/dev/null || true
          echo "dist/data listing:"
          find dist/data -maxdepth 2 -type f -printf "%P\n" | sort || true

      # ---------- Publish to Pages ----------
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4